{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ninad\\\\iot-awning-2\\\\awning-react\\\\src\\\\components\\\\WindGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport '../styles/GraphStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WindGraph = () => {\n  _s();\n  const [windData, setWindData] = useState([]);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = () => {\n      const dummyData = Array.from({\n        length: 10\n      }, () => Math.floor(Math.random() * 50));\n      setWindData(dummyData);\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy(); // Destroy the previous chart instance\n    }\n    const ctx = document.getElementById('wind-chart');\n    const newChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: Array.from({\n          length: windData.length\n        }, (_, i) => `Sample ${i + 1}`),\n        datasets: [{\n          label: 'Wind Speed',\n          data: windData,\n          fill: false,\n          borderColor: 'rgb(75, 192, 192)',\n          tension: 0.1\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Samples'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Wind Speed (m/s)'\n            },\n            suggestedMin: 0,\n            // Set the minimum value for the Y-axis\n            suggestedMax: Math.max(...windData) + 10,\n            // Set the maximum value for the Y-axis\n            // Adjust the step size for better scaling\n            ticks: {\n              stepSize: 5\n            }\n          }\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: 'Real-time Wind Detection Graph',\n            font: {\n              size: 18\n            }\n          },\n          tooltip: {\n            enabled: true,\n            callbacks: {\n              label: context => `Wind Speed: ${context.raw} m/s`\n            }\n          }\n        }\n      }\n    });\n    chartRef.current = newChart;\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy(); // Ensure that the chart is destroyed when the component unmounts\n      }\n    };\n  }, [windData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"wind-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(WindGraph, \"routhKruBhSNPGnqiwlc07SnBJc=\");\n_c = WindGraph;\nexport default WindGraph;\nvar _c;\n$RefreshReg$(_c, \"WindGraph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","jsxDEV","_jsxDEV","WindGraph","_s","windData","setWindData","chartRef","fetchData","dummyData","Array","from","length","Math","floor","random","current","destroy","ctx","document","getElementById","newChart","type","data","labels","_","i","datasets","label","fill","borderColor","tension","options","scales","x","title","display","text","y","suggestedMin","suggestedMax","max","ticks","stepSize","plugins","font","size","tooltip","enabled","callbacks","context","raw","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ninad/iot-awning-2/awning-react/src/components/WindGraph.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport '../styles/GraphStyles.css'\r\n\r\nconst WindGraph = () => {\r\n    const [windData, setWindData] = useState([]);\r\n    const chartRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            const dummyData = Array.from({ length: 10 }, () => Math.floor(Math.random() * 50));\r\n            setWindData(dummyData);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (chartRef.current) {\r\n            chartRef.current.destroy(); // Destroy the previous chart instance\r\n        }\r\n\r\n        const ctx = document.getElementById('wind-chart');\r\n        const newChart = new Chart(ctx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: Array.from({ length: windData.length }, (_, i) => `Sample ${i + 1}`),\r\n                datasets: [{\r\n                    label: 'Wind Speed',\r\n                    data: windData,\r\n                    fill: false,\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                }]\r\n            },\r\n            options: {\r\n                scales: {\r\n                    x: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Samples'\r\n                        }\r\n                    },\r\n                    y: {\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Wind Speed (m/s)'\r\n                        },\r\n                        suggestedMin: 0, // Set the minimum value for the Y-axis\r\n                        suggestedMax: Math.max(...windData) + 10, // Set the maximum value for the Y-axis\r\n                        // Adjust the step size for better scaling\r\n                        ticks: {\r\n                            stepSize: 5\r\n                        }\r\n                    }\r\n                },\r\n                plugins: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Real-time Wind Detection Graph',\r\n                        font: {\r\n                            size: 18\r\n                        }\r\n                    },\r\n                    tooltip: {\r\n                        enabled: true,\r\n                        callbacks: {\r\n                            label: (context) => `Wind Speed: ${context.raw} m/s`\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        chartRef.current = newChart;\r\n\r\n        return () => {\r\n            if (chartRef.current) {\r\n                chartRef.current.destroy(); // Ensure that the chart is destroyed when the component unmounts\r\n            }\r\n        };\r\n    }, [windData]);\r\n\r\n    return (\r\n        <div>\r\n            <canvas id=\"wind-chart\"></canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WindGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}